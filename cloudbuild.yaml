steps:
  # Step 0: Generate dynamic version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Dynamically create startup.sh
  - name: 'ubuntu'
    id: 'Create startup.sh'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        cat <<EOF > /workspace/startup-$$VERSION_TAG.sh
        #!/bin/bash
        echo "Dynamic startup script for $$VERSION_TAG started..."

        apt-get update -y
        apt-get install -y apache2

        systemctl start apache2
        systemctl enable apache2

        echo "<h1>Hello Apache2 running from version $$VERSION_TAG</h1>" > /var/www/html/index.html
        EOF

        chmod +x /workspace/startup-$$VERSION_TAG.sh

  # Step 2: Upload startup.sh to GCS with version tag in filename
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Upload startup.sh to GCS'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        echo "Uploading startup-$$VERSION_TAG.sh to GCS..."
        gsutil cp /workspace/startup-$$VERSION_TAG.sh gs://vamsi-artifact-bucket/scripts/startup-$$VERSION_TAG.sh


  # Step 3: Create Instance Template with startup-script-url
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        VERSION=$$VERSION_TAG
        STARTUP_SCRIPT_URL=gs://vamsi-artifact-bucket/scripts/startup-$$VERSION.sh

        gcloud compute instance-templates create vamsi-template-$$VERSION \
          --machine-type=e2-medium \
          --region=asia-east1 \
          --image-family=debian-12 \
          --image-project=debian-cloud \
          --tags=http-server,https-server,allow-8080 \
          --metadata=startup-script-url=$$STARTUP_SCRIPT_URL

  # Step 4: Create or Update MIG (Zonal, versioned template)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env

        echo "Checking if MIG exists..."
        if ! gcloud compute instance-groups managed describe vamsi-mig --zone=asia-east1-b > /dev/null 2>&1; then
          echo "MIG does not exist. Creating with template: vamsi-template-$$VERSION_TAG"
          gcloud compute instance-groups managed create vamsi-mig \
            --base-instance-name=vamsi-instance \
            --template=vamsi-template-$$VERSION_TAG \
            --size=1 \
            --zone=asia-east1-b
        else
          echo "MIG exists. Updating with new template: vamsi-template-$$VERSION_TAG"
          gcloud compute instance-groups managed set-instance-template vamsi-mig \
            --template=vamsi-template-$$VERSION_TAG \
            --zone=asia-east1-b

          echo "Triggering rolling restart..."
          gcloud compute instance-groups managed rolling-action restart vamsi-mig \
            --zone=asia-east1-b
        fi


options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
